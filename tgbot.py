import re
import logging
import unicodedata
from telegram.ext import Application, MessageHandler, filters
from telegram import Update
from telegram.ext import ContextTypes

TOKEN = "7794147282:AAFhJFb2fTvVgQxzy20oehf7S0rV6hIF4dk"

# –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)
logger = logging.getLogger(__name__)


def clean_text(text):
    return ''.join(c for c in text if not unicodedata.category(c).startswith('Cf'))


async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    message_text = update.message.text.strip()
    logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: {message_text[:50]}...")

    if re.match(r'(?i)^\s*.*?–±–∞–ª–∞–Ω—Å.*?', message_text):
        await process_balance_message(update, message_text)
    elif re.match(r'(?i)^\s*.*?—É—Ä–∞(?:–∞+)?\s*.*?', message_text):
        await process_lottery_message(update, message_text)
    elif message_text.lower().startswith("—Ü–µ–Ω–∞") and update.message.reply_to_message:
        await process_price_message(update, message_text)
    else:
        await update.message.reply_text(
            "–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–æ."
        )


async def process_balance_message(update: Update, message_text: str):
    try:
        amounts = re.findall(r'-\s*([\d\s]+)\s*‚ÇΩ', message_text)
        total = sum(int(a.replace(" ", ""))
                    for a in amounts if a.replace(" ", "").isdigit())
        await update.message.reply_text(f"üí∞ –û–±—â–∞—è —Å—É–º–º–∞: {total}‚ÇΩ")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ process_balance_message: {e}")
        await update.message.reply_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –±–∞–ª–∞–Ω—Å–∞.")


async def process_lottery_message(update: Update, message_text: str):
    try:
        # –û—á–∏—Å—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ –æ—Ç —Å–∫—Ä—ã—Ç—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
        cleaned_message = clean_text(message_text)

        # –ù–∞–π–¥—ë–º –≤—Å–µ –∏–º–µ–Ω–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
        names = re.findall(r'@‚Å®~([^‚Å©\n]+)', cleaned_message)
        if not names:
            names = re.findall(r'@~([^ \n-]+)', cleaned_message)

        if not names:
            await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∏–º–µ–Ω–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤.")
            return

        # –ü–æ–¥—Å—á—ë—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∫–∞–∂–¥–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞
        name_counts = {}
        for name in names:
            name = name.strip()
            name_counts[name] = name_counts.get(name, 0) + 1

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É –¥–ª—è –≤—Ç–æ—Ä–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è (—Å –ø–æ–¥—Å—á—ë—Ç–æ–º)
        response = ""
        for i, (name, count) in enumerate(name_counts.items(), 1):
            response += f"[{i}] @~{name} - {count}\n"

        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
        total_count = sum(name_counts.values())
        response += f"\n–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ - {total_count}"

        # –ü–µ—Ä–µ–±–∏—Ä–∞–µ–º –≤—Å—ë —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –¥–æ–±–∞–≤–ª—è–µ–º —Ä–æ–≤–Ω–æ –æ–¥–Ω—É –≥–∞–ª–æ—á–∫—É –∫ –∫–∞–∂–¥–æ–º—É –∏–º–µ–Ω–∏
        modified_text = ""
        start_idx = 0
        for match in re.finditer(r'(@‚Å®~[^‚Å©\n]+‚Å©|@‚Å®~[^‚Å©\n]+|@~[^\s\n-]+)', message_text):
            # –î–æ–±–∞–≤–ª—è–µ–º –≤—Å—ë –¥–æ –Ω–∞–π–¥–µ–Ω–Ω–æ–≥–æ –∏–º–µ–Ω–∏
            modified_text += message_text[start_idx:match.start()]
            name = match.group(0)
            # –£–¥–∞–ª—è–µ–º –≤—Å–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –≥–∞–ª–æ—á–∫–∏ –≤ —Å—Ç—Ä–æ–∫–µ –ø–æ—Å–ª–µ –∏–º–µ–Ω–∏ –¥–æ –∫–æ–Ω—Ü–∞ —Å—Ç—Ä–æ–∫–∏ –∏–ª–∏ —Å–ª–µ–¥—É—é—â–µ–≥–æ –∏–º–µ–Ω–∏
            end_idx = message_text.find('\n', match.end()) if message_text.find(
                '\n', match.end()) != -1 else len(message_text)
            name_segment = message_text[match.start():end_idx]
            clean_name_segment = re.sub(r'‚úÖ+', '', name_segment)
            # –î–æ–±–∞–≤–ª—è–µ–º —Ä–æ–≤–Ω–æ –æ–¥–Ω—É –≥–∞–ª–æ—á–∫—É —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –∏–º–µ–Ω–∏
            modified_text += clean_name_segment + "‚úÖ"
            start_idx = end_idx

        # –î–æ–±–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–ª—å–Ω—É—é —á–∞—Å—Ç—å —Ç–µ–∫—Å—Ç–∞ –ø–æ—Å–ª–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∏–º–µ–Ω–∏
        modified_text += message_text[start_idx:]

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–º–µ–Ω—ë–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≥–∞–ª–æ—á–∫–∞–º–∏
        await update.message.reply_text(modified_text)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Ç–æ—Ä–æ–π —Ç–µ–∫—Å—Ç —Å –ø–æ–¥—Å—á—ë—Ç–æ–º
        await update.message.reply_text(response)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ process_lottery_message: {e}")
        await update.message.reply_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ä–æ–∑—ã–≥—Ä—ã—à–∞.")


async def process_price_message(update: Update, message_text: str):
    try:
        price_match = re.search(r'—Ü–µ–Ω–∞\s*\n?\s*(\d+)',
                                message_text, re.IGNORECASE)
        if not price_match:
            await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Å—É–º–º—É.")
            return

        price = int(price_match.group(1))
        replied_text = update.message.reply_to_message.text
        matches = re.findall(r'@~([^-\n]+?)\s*-\s*(\d+)', replied_text)

        if not matches:
            await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Å–ø–∏—Å–æ–∫ —Å –Ω–æ–º–µ—Ä–∫–∞–º–∏.")
            return

        result = ""
        total_sum = 0
        for name, count in matches:
            count = int(count)
            total = count * price
            total_sum += total
            result += f"@~{name.strip()} ‚Äî {count} √ó {price} = {total}‚ÇΩ\n"

        # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        await update.message.reply_text(result.strip())
        # –û—Ç–ø—Ä–∞–≤–∫–∞ –æ–±—â–µ–π —Å—É–º–º—ã
        await update.message.reply_text(f"üí∞ –û–±—â–∞—è —Å—É–º–º–∞: {total_sum}‚ÇΩ")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ process_price_message: {e}")
        await update.message.reply_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ü–µ–Ω—ã.")


def main():
    application = Application.builder().token(TOKEN).build()
    application.add_handler(MessageHandler(
        filters.TEXT & ~filters.COMMAND, handle_message))
    logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
    application.run_polling()


if __name__ == "__main__":
    main()
