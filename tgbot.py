import re
import logging
import unicodedata
from telegram.ext import Application, MessageHandler, filters
from telegram import Update
from telegram.ext import ContextTypes

# –¢–æ–∫–µ–Ω –≤–∞—à–µ–≥–æ –±–æ—Ç–∞
TOKEN = "7794147282:AAFhJFb2fTvVgQxzy20oehf7S0rV6hIF4dk"

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)
logger = logging.getLogger(__name__)


def clean_text(text):
    return ''.join(c for c in text if not unicodedata.category(c).startswith('Cf'))


async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    message_text = update.message.text.strip()
    logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: {message_text[:50]}...")

    if re.match(r'(?i)^\s*.*?–±–∞–ª–∞–Ω—Å.*?', message_text):
        logger.info("–°–æ–æ–±—â–µ–Ω–∏–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–æ –∫–∞–∫ –±–∞–ª–∞–Ω—Å")
        await process_balance_message(update, message_text)
    elif re.match(r'(?i)^\s*.*?—É—Ä–∞(?:–∞+)?\s*.*?', message_text):
        logger.info("–°–æ–æ–±—â–µ–Ω–∏–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–æ –∫–∞–∫ —Ä–æ–∑—ã–≥—Ä—ã—à")
        await process_lottery_message(update, message_text)
    else:
        logger.info("–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–æ")
        await update.message.reply_text(
            "–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–æ. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –æ–Ω–æ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å–æ —Å–ª–æ–≤–∞ '–ë–ê–õ–ê–ù–°' –∏–ª–∏ '—É—Ä–∞'."
        )


async def process_balance_message(update: Update, message_text: str):
    try:
        amounts = re.findall(r'-\s*([\d\s]+)\s*‚ÇΩ', message_text)
        logger.info(f"–ù–∞–π–¥–µ–Ω–æ —Å—É–º–º: {len(amounts)}")

        total = 0
        for amount in amounts:
            cleaned_amount = amount.replace(" ", "")
            if cleaned_amount.isdigit():
                total += int(cleaned_amount)
            else:
                logger.warning(f"–ù–µ–≤–∞–ª–∏–¥–Ω–∞—è —Å—É–º–º–∞: {cleaned_amount}")

        response = f"üí∞ –û–±—â–∞—è —Å—É–º–º–∞: {total}‚ÇΩ"
        logger.info(f"–†–µ–∑—É–ª—å—Ç–∞—Ç: {response}")
        await update.message.reply_text(response)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ process_balance_message: {e}")
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –±–∞–ª–∞–Ω—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")


async def process_lottery_message(update: Update, message_text: str):
    try:
        cleaned_message = clean_text(message_text)
        names = re.findall(r'@~\s*([^\n]+)', cleaned_message)
        logger.info(f"–ù–∞–π–¥–µ–Ω–æ –∏–º–µ–Ω: {len(names)}")

        if not names:
            await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∏–º–µ–Ω–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –æ–Ω–∏ —Å–ª–µ–¥—É—é—Ç –∑–∞ '@~'.")
            return

        name_counts = {}
        for name in names:
            cleaned_name = name.strip()
            name_counts[cleaned_name] = name_counts.get(cleaned_name, 0) + 1

        response = ""
        for i, (name, count) in enumerate(name_counts.items(), 1):
            response += f"[{i}] @~{name} - {count}\n"

        logger.info("–û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Ä–æ–∑—ã–≥—Ä—ã—à–∞")
        await update.message.reply_text(response)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ process_lottery_message: {e}")
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ä–æ–∑—ã–≥—Ä—ã—à–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")


def main():
    try:
        application = Application.builder().token(TOKEN).build()
        application.add_handler(MessageHandler(
            filters.TEXT & ~filters.COMMAND, handle_message))
        logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
        application.run_polling()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ main: {e}")


if __name__ == "__main__":
    main()
